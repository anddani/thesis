#!/bin/bash

# TODO:
#   - Use folders for each day in DATA_PATH?

# Get current date and time to create
# unique folder
TIME=$(date +"%y%m%d_%H%M%S")
DATA_PATH=$EXJOBB_HOME/Data
FILENAME="/sdcard/data.out"
RESULTS_PATH=$DATA_PATH/results

function create_common_table {
    CURRENT_DIR=$1
    CURRENT_TYPE=$2
    CONTENT=$(ls -I "*.tex" $CURRENT_DIR)
    COMMON_TABLES=""

    for c in $CONTENT ; do
        CURRENT_FILE=$CURRENT_DIR/$c
        TEX_GRAPH="${CURRENT_FILE}.tex"

        if [ -f "$CURRENT_FILE" ] ; then
            MIN=0
            MAX=100000000

            if [ $CURRENT_TYPE == "JNI" ] ; then 
                TEX_COMMON_TABLE="$CURRENT_DIR/common_table_${CURRENT_TYPE}.tex"
            else
                LANGUAGE=$(echo $c | tr '_' ' ' | awk '{print $1}')
                TEX_COMMON_TABLE="$CURRENT_DIR/${LANGUAGE}_common_table_${CURRENT_TYPE}.tex"
            fi

            # If no common table file exists, insert first column
            if [ ! -f "$TEX_COMMON_TABLE" ] ; then
                if [ "$CURRENT_TYPE" == "JNI" ] ; then
                    echo $'\\textbf{Block size} \n\\textbf{16} \n\\textbf{32} \n\\textbf{64} \n\\textbf{128} \n\\textbf{256} \n\\textbf{512} \n\\textbf{1024} \n\\textbf{2048} \n\\textbf{4096} \n\\textbf{8192} \n\\textbf{16384} \n\\textbf{32768} \n\\textbf{65536} \n\\textbf{131072} \n\\textbf{262144}' > $TEX_COMMON_TABLE
                elif [ "$CURRENT_TYPE" == "SMALL" ] ; then
                    echo $'\\textbf{Block size} \n\\textbf{16} \n\\textbf{32} \n\\textbf{64} \n\\textbf{128}' > $TEX_COMMON_TABLE
                elif [ "$CURRENT_TYPE" == "MEDIUM" ] ; then
                    echo $'\\textbf{Block size} \n\\textbf{256} \n\\textbf{512} \n\\textbf{1024} \n\\textbf{2048} \n\\textbf{4096}' > $TEX_COMMON_TABLE
                elif [ "$CURRENT_TYPE" == "LARGE" ] ; then
                    echo $'\\textbf{Block size} \n\\textbf{8192} \n\\textbf{16384} \n\\textbf{32768} \n\\textbf{65536}' > $TEX_COMMON_TABLE
                elif [ "$CURRENT_TYPE" == "EXTRA" ] ; then
                    echo $'\\textbf{Block size} \n\\textbf{8192} \n\\textbf{16384} \n\\textbf{32768} \n\\textbf{65536} \n\\textbf{131072} \n\\textbf{262144}' > $TEX_COMMON_TABLE
                else # ALL
                    echo $'\\textbf{Block size} \n\\textbf{16} \n\\textbf{32} \n\\textbf{64} \n\\textbf{128} \n\\textbf{256} \n\\textbf{512} \n\\textbf{1024} \n\\textbf{2048} \n\\textbf{4096} \n\\textbf{8192} \n\\textbf{16384} \n\\textbf{32768} \n\\textbf{65536} \n\\textbf{131072} \n\\textbf{262144}' > $TEX_COMMON_TABLE
                fi
                COMMON_TABLES="$COMMON_TABLES $TEX_COMMON_TABLE"
            fi

            if [ "$CURRENT_TYPE" == "SMALL" ] ; then
                    MIN=16
                    MAX=128
            elif [ "$CURRENT_TYPE" == "MEDIUM" ] ; then
                    MIN=256
                    MAX=4096
            elif [ "$CURRENT_TYPE" == "LARGE" ] ; then
                    MIN=8192
                    MAX=65536
            elif [ "$CURRENT_TYPE" == "EXTRA" ] ; then
                    MIN=8192
                    MAX=262144
            fi

            # Symbolic link with removed N
            # ln -s $TEX_GRAPH $(echo $TEX_GRAPH | sed 's/_N_[0-9]*//g')

            TEST_NAME=$(echo $c | sed 's/\(Java\|CPP\)_//g' | sed 's/.*Benchmark_//g' | sed 's/_N_.*//g' | tr '_' ' ')
            TEST_NAME="$(tr '[:lower:]' '[:upper:]' <<< ${TEST_NAME:0:1})${TEST_NAME:1}" # Capitalize first letter
            TEST_NAME="& \\\\textbf{$TEST_NAME}"
            cat $CURRENT_FILE | awk -v min=$MIN -v max=$MAX '{if (int($1) >= int(min) && int($1) <= int(max)) print "& " $2 " $\\pm$ " $5}' | sed "1i $TEST_NAME" | paste -d' ' $TEX_COMMON_TABLE - > tempfil
            cat tempfil > $TEX_COMMON_TABLE
        fi
    done

    rm tempfil

    # Format common tables
    for c in $COMMON_TABLES ; do

        # Insert after each line
        sed -i 's/$/\\\\/g' $c

        # Get number of algorithms
        NUM_COLS=$(cat $c | head -n 1 | grep -o '&' | wc -l)

        # Tabular format
        COLS=$(seq $NUM_COLS | xargs -I{} printf "c")

        sed -i "1i \\\\\\begin{tabular}{l$COLS}\\\\toprule" $c
        sed -i '1i \\\rowcolors{1}{}{lightgray}' $c
        sed -i '/Block size/ s/$/\\midrule/' $c
        echo '\bottomrule' >> $c
        echo '\end{tabular}' >> $c
    done
}

function create_line_graph {
    CURRENT_DIR=$1
    CURRENT_TYPE=$2
    CONTENT=$(ls -I "*.tex" $CURRENT_DIR)
    MIN=0
    MAX=100000000

    if [ "$CURRENT_TYPE" == "SMALL" ] ; then
        MIN=16
        MAX=128
    elif [ "$CURRENT_TYPE" == "MEDIUM" ] ; then
        MIN=256
        MAX=4096
    elif [ "$CURRENT_TYPE" == "LARGE" ] ; then
        MIN=8192
        MAX=65536
    elif [ "$CURRENT_TYPE" == "EXTRA" ] ; then
        MIN=8192
        MAX=262144
    fi

    # Create one graph for every file
    NEW_FILE="${CURRENT_DIR}/line_graph_${CURRENT_TYPE}.tex"

    # Print graph header
    echo '\begin{tikzpicture}' >> $NEW_FILE
    echo '\begin{axis}[xlabel={Block size},ylabel={Time (ms)},width=0.70\linewidth,legend pos=north west,scaled y ticks = false,legend cell align=left,legend style={font=\scriptsize}]' >> $NEW_FILE
    # Content
    ALGS=""
    for c in $CONTENT ; do
        CURRENT_FILE=${CURRENT_DIR}/$c
        # Algorithm label in legend
        ALGS="$ALGS,$(echo $c | sed 's/_N_.*//g' | tr '_' ' ')"
        echo '\addplot coordinates {' >> $NEW_FILE
        cat $CURRENT_FILE | awk -v min=$MIN -v max=$MAX '{if (int($1) >= int(min) && int($1) <= int(max)) print "(" $1 ", " $2 ")"}' >> $NEW_FILE
        echo '};' >> $NEW_FILE
    done

    # Footer
    ALGS=$(echo $ALGS | sed 's/^,//g' | sed 's/PP/++/g')
    echo "\\legend{${ALGS}}" >> $NEW_FILE
    echo '\end{axis}' >> $NEW_FILE
    echo '\end{tikzpicture}' >> $NEW_FILE

    # Create one graph for every language
    FILES=""
    # Content
    ALGS=""
    LANGUAGES=""
    for c in $CONTENT ; do
        LANGUAGES="$LANGUAGES $(echo $c | tr '_' ' ' | awk '{print $1}')"
    done
    LANGUAGES=$(echo $LANGUAGES | xargs -n1 | sort -u | xargs)

    for l in $LANGUAGES ; do
        for c in $CONTENT ; do
            # If file has lang in name
            if [[ $c =~ $l ]] ; then
                CURRENT_FILE=$CURRENT_DIR/$c
                NEW_FILE="${CURRENT_DIR}/${l}_line_graph_${CURRENT_TYPE}.tex"
                if [ ! -f "$NEW_FILE" ] ; then
                    # Print graph header
                    echo '\begin{tikzpicture}' >> $NEW_FILE
                    echo '\begin{axis}[xlabel={Block size},ylabel={Time (ms)},width=0.70\linewidth,legend pos=north west,scaled y ticks = false,legend cell align=left,legend style={font=\scriptsize}]' >> $NEW_FILE
                    FILES="$FILES $NEW_FILE"
                fi
                # Algorithm label in legend
                echo "# $(echo $c | sed 's/_N_.*//g' | tr '_' ' ')" >> $NEW_FILE
                echo '\addplot coordinates {' >> $NEW_FILE
                cat $CURRENT_FILE | awk -v min=$MIN -v max=$MAX '{if (int($1) >= int(min) && int($1) <= int(max)) print "(" $1 ", " $2 ")"}' >> $NEW_FILE
                echo '};' >> $NEW_FILE
            fi
        done
    done

    # FOOTER
    for CURRENT_FILE in $FILES ; do
        ALG_TYPES=$(cat $CURRENT_FILE | grep '#' | sed 's/#/,/g')
        echo "\\legend{$(echo $ALG_TYPES | sed 's/^, //g' | sed 's/PP/++/g')}" >> $CURRENT_FILE
        echo '\end{axis}' >> $CURRENT_FILE
        echo '\end{tikzpicture}' >> $CURRENT_FILE
        sed -i '/#/d' $CURRENT_FILE
    done
}

function fft_to_latex {
    CURRENT_DIRS="$@"

    for CURRENT_DIR in $CURRENT_DIRS ; do
        CONTENT=$(ls $CURRENT_DIR)
        COMMON_TABLES=""

        # common table for all sizes
        create_common_table $CURRENT_DIR ${CURRENT_DIR##*/}
        create_common_table $CURRENT_DIR "SMALL"
        create_common_table $CURRENT_DIR "MEDIUM"
        create_common_table $CURRENT_DIR "LARGE"
        create_common_table $CURRENT_DIR "EXTRA"

        # For each file in folder
        create_line_graph $CURRENT_DIR ${CURRENT_DIR##*/}
        create_line_graph $CURRENT_DIR "SMALL"
        create_line_graph $CURRENT_DIR "MEDIUM"
        create_line_graph $CURRENT_DIR "LARGE"
        create_line_graph $CURRENT_DIR "EXTRA"
    done

    # Mix match FFT and NEON for all sizes
}

function convert_test_results {
    N=""
    while read line ; do
        TYPE=$(echo $line | cut -d' ' -f1)

        # Only lines with text allowed
        if [ "$TYPE" == "" ] ; then
            continue
        fi
        if [ "$TYPE" == "numTests" ] ; then
            N=$(echo $line | cut -d' ' -f2)
        else
            ALG=$(echo $line | cut -d' ' -f2)
            BLOCK_SIZE=$(echo $line | cut -d' ' -f4)

            FOLDER="$RESULTS_PATH/$TYPE"
            EXEC_TIMES=$(echo $line | cut -d' ' -f6-)

            # Mean
            MEAN=$(echo $EXEC_TIMES | awk '{sum += $1;} END {printf "%.4f", sum/NR;}' RS=" ")

            # Standard deviation
            SD=$(echo $EXEC_TIMES | awk '{sum += $1; array[NR] = $1;} END {for(i=1; i<=NR; i++){sumsq += ((array[i]-(sum/NR))^2);} printf "%.4f", sqrt(sumsq/(NR-1))}' RS=" ")

            # Standard error
            SE=$(awk -v sd="$SD" -v n="$N" 'BEGIN{printf "%.4f", sd/sqrt(n)}')

            # Margin of error
            ME=$(awk -v se="$SE" 'BEGIN{printf "%.4f", se*1.96}')

            if [ ! -d "$FOLDER" ] ; then
                mkdir $FOLDER
            fi

            echo "$BLOCK_SIZE $MEAN $SD $SE $ME" >> "$FOLDER/${ALG}_N_${N}"
        fi
    done <$1
}


if [ -z "$EXJOBB_HOME" ]; then
    echo "EXJOBB_HOME not set"
    exit 1
fi

OPTIND=1
while getopts "cv" opt; do
    case "$opt" in
        c)  CONVERT=1
            ;;
        v)  VIEW=1
            ;;
    esac
done

if [ "$VIEW" == "1" ] ; then
    eval adb shell "'cat $FILENAME'" | less
elif [ "$CONVERT" == "1" ] ; then
    # Get path and filename of the latest fetched file
    LATEST="$DATA_PATH/$(ls -l $DATA_PATH | grep '\.out' | tail -n 1 | awk -F ' ' '{print $9}')"

    # Backup previous results
    if [ -d "$RESULTS_PATH" ] ; then
        echo "-- folder exists, backing up..."
        mv $RESULTS_PATH $DATA_PATH/backup_$TIME
    fi
    mkdir $RESULTS_PATH

    # Convert data.out to separate files
    convert_test_results $LATEST

    # Create tables for each test
    create_common_table $RESULTS_PATH/JNI JNI

    # Create graphs for FFT and NEON tests
    fft_to_latex $RESULTS_PATH/FFT $RESULTS_PATH/NEON

else
    echo "-- moving data from phone to $DATA_PATH/$TIME"
    eval adb shell "'cat $FILENAME'" > $DATA_PATH/$TIME.out
fi

if [ $? -ne 0 ] ; then
    echo "!! ERROR - no such file: $FILENAME"
    exit 1
fi
echo "-- done"
